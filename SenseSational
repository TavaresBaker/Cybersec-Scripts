#!/bin/sh

# Create the directories
mkdir -p /SenseSation/Scripts /SenseSation/Backups /SenseSation/Quarantine /SenseSation/Supporting_Files

# Deploy rc.initial
cat << 'EOF' > /SenseSation/Supporting_Files/rc.initial
#!/bin/sh

# SenseSation rc.initial

# Keep the user in the menu
trap : INT
trap : QUIT
trap : ILL

while : ; do

if [ -f /tmp/ttybug ]; then
	/bin/rm /tmp/ttybug
	exit && exit && logout
fi

/etc/rc.banner

# Read product_name from $g, defaults to pfSense
if [ -f /etc/product_name ]; then
	product_name=$(/bin/cat /etc/product_name)
else
	product_name=$(/usr/local/sbin/read_global_var product_name pfSense)
fi

# Read product_label from $g, defaults to pfSense
if [ -f /etc/product_label ]; then
	product_label=$(/bin/cat /etc/product_label)
else
	product_label=$(/usr/local/sbin/read_global_var product_label pfSense)
fi

# Check to see if SSH is running.
if /bin/pgrep -qaF /var/run/sshd.pid sshd 2>/dev/null; then
	sshd_option='Disable'
else
	sshd_option='Enable'
fi

echo ""
echo ""

# ASCII Art â€” blue and red only, reset after
echo -e "\033[1;34m     _____                      \033[1;31m_____       __  _           "
echo -e "\033[1;34m    / ___/___  ____  ________  \033[1;31m/ ___/____ _/ /_(_)___  ____ "
echo -e "\033[1;34m    \\__ \\/ _ \\/ __ \\/ ___/ _ \\ \033[1;31m\\__ \\/ __ \`/ __/ / __ \\/ __ \\"
echo -e "\033[1;34m   ___/ /  __/ / / (__  /  __ \033[1;31m___/ / /_/ / /_/ / /_/ / / / /"
echo -e "\033[1;34m  /____/\\___/_/ /_/____/\\___/\033[1;31m/_____/\__,/\\__/_/\\____/_/ /_/"
echo -e "\033[0m"  # Reset color after ASCII

echo ""
echo ""

# Console Menu (default color = white)
echo " 0) Exit                                1) Shell"
echo " 2) Restore Binaries                    3) Restore Files"
echo " 4) Find Added Users                    5) Find Points of Entry"
echo " 6) Find Webhooks                       7) Nuke Web Console"
echo " 8) Find Suspicious Processes           9) Deploy PFBlocker"
echo ""
echo ""

read -p "Enter a number: " opmode
echo

case ${opmode} in
100)
	protocol=$(/usr/local/sbin/read_xml_tag.sh string system/webgui/protocol)
	port=$(/usr/local/sbin/read_xml_tag.sh string system/webgui/port)
	[ -z "$protocol" ] && protocol='http'
	if [ -z "$port" ]; then
		case $protocol in
			https) port=443;;
			*)     port=80;;
		esac
	fi
	links "${protocol}://localhost:${port}"
	;;

'')
	if [ -n "$SSH_CONNECTION" ]; then
		exit
	else
		/bin/kill $PPID ; exit
	fi
	;;

9)
  	/root/SenseSation/Scripts/deploy_pfblocker.sh
  	;;

8)
	/root/SenseSation/Scripts/find_suspecious_processes.sh
	;;

7)
	/root/SenseSation/Scripts/nuke_GUI.sh
	;;

6)
	/root/SenseSation/Scripts/find_webhooks.sh
	;;

5)
	/root/SenseSation/Scripts/shell_hunter.sh
	;;

4)
	/root/SenseSation/Scripts/delete_users.sh
	;;

3)
	/root/SenseSation/Scripts/restore_files.sh
	;;

2)
	/root/SenseSation/Scripts/restore_binaries.sh
	;;

1)
	/bin/sh
	;;

0)
	exit
	;;

*)
	echo "Invalid option."
	exit 1
	;;
esac

done
EOF

# Deploy rc.banner
cat << 'EOF' > /SenseSation/Supporting_Files/rc.banner
#!/usr/local/bin/php-cgi -f
<?php
/*
 * rc.banner - Sensation Edition
 * Custom system banner for the Sensation cleanup script
 * (c) 2025 John Doe / Apogee Networks
 */

require_once("config.inc");
require_once("gwlb.inc");
require_once("interfaces.inc");

$hostname = config_get_path('system/hostname');
$machine = trim(`uname -m`);
$platform = system_identify_specific_platform();

$sensation_version_file = "/etc/sensation_version";
$sensation_version = "v1.0.0";
if (file_exists($sensation_version_file)) {
	$sensation_version = trim(file_get_contents($sensation_version_file));
}

// Print Sensation welcome banner
printf("\n*** Welcome to Sensation %s (%s) on %s ***\n", $sensation_version, $machine, $hostname);
if (isset($platform['descr'])) {
	printf("Platform: %s\n", $platform['descr']);
}
printf("\n");

// Get interfaces
$iflist = get_configured_interface_with_descr(true);

// Calculate widths for alignment
$realif_width = 1;
$tobanner_width = 1;
foreach ($iflist as $ifname => $friendly) {
	$realif = get_real_interface($ifname);
	$realif_length = strlen($realif);
	if ($realif_length > $realif_width) {
		$realif_width = $realif_length;
	}
	$tobanner = "{$friendly} ({$ifname})";
	$tobanner_length = strlen($tobanner);
	if ($tobanner_length > $tobanner_width) {
		$tobanner_width = $tobanner_length;
	}
}
$v6line_width = $realif_width + $tobanner_width + 9;

// Print interface summaries
foreach ($iflist as $ifname => $friendly) {
	$ifconf = config_get_path("interfaces/{$ifname}");

	$class = match($ifconf['ipaddr'] ?? '') {
		'dhcp' => '/DHCP4',
		'pppoe' => '/PPPoE',
		'pptp' => '/PPTP',
		'l2tp' => '/L2TP',
		default => '',
	};

	$class6 = match($ifconf['ipaddrv6'] ?? '') {
		'dhcp6' => '/DHCP6',
		'slaac' => '/SLAAC',
		'6rd' => '/6RD',
		'6to4' => '/6to4',
		'track6' => '/t6',
		default => '',
	};

	$ipaddr = get_interface_ip($ifname);
	$subnet = get_interface_subnet($ifname);
	$ipaddr6 = get_interface_ipv6($ifname);
	$subnet6 = get_interface_subnetv6($ifname);
	$realif = get_real_interface($ifname);
	$tobanner = "{$friendly} ({$ifname})";

	printf(" %-{$tobanner_width}s -> \%-{$realif_width}s\ -> ",
		$tobanner,
		$realif
	);
	$v6first = false;
	if (!empty($ipaddr) && !empty($subnet)) {
		printf("v4%s: %s/%s", $class, $ipaddr, $subnet);
	} else {
		$v6first = true;
	}
	if (!empty($ipaddr6) && !empty($subnet6)) {
		if (!$v6first) {
			printf("\n%s", str_repeat(" ", $v6line_width));
		}
		printf("v6%s: %s/%s\033[0m", $class6, $ipaddr6, $subnet6);
	}
	printf("\n");
}
printf("\n");
?>
EOF

# Make the files executable (if needed)
chmod +x /SenseSation/Supporting_Files/rc.initial
chmod +x /SenseSation/Supporting_Files/rc.banner

# Backup original files
if [ -f /etc/rc.initial ]; then
    mv /etc/rc.initial /SenseSation/backups/
fi

if [ -f /etc/rc.banner ]; then
    mv /etc/rc.banner /SenseSation/backups/
fi

# Move new files to the expected location
cp /SenseSation/Supporting_Files/rc.initial /etc/
cp /SenseSation/Supporting_Files/rc.banner /etc/

echo "Setup Successful"
